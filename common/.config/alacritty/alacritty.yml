# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 0
    lines: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: buttonless

  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  normal:
    family: Roboto Mono Light for Powerline
    style: Light

  bold:
    family: Roboto Mono for Powerline
    style: Bold

  # Italic font face
  italic:
    family: Roboto Mono for Powerline
    style: Italic

  # Point size
  size: 14.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  # use_thin_strokes: false

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

# Colors (SMYCK)
colors:
  # Default colors
  primary:
    background: '0x232423'
    foreground: '0xF8F8F8'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # dim_foreground: '0x9a9a9a'

    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    bright_foreground: '0xfeffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  #cursor:
  #  text: '0x000000'
  #  cursor: '0xffffff'

  # Normal colors
  normal:
    black:   '0x000000'
    red:     '0xC75646'
    green:   '0x8EB33B'
    yellow:  '0xD0B03C'
    blue:    '0x4E90A7'
    magenta: '0xC8A0D1'
    cyan:    '0x218693'
    white:   '0xB0B0B0'

  bright:
    black:   '0x5D5D5D'
    red:     '0xE09690'
    green:   '0xCDEE69'
    yellow:  '0xFFE377'
    blue:    '0x9CD9F0'
    magenta: '0xFBB1F9'
    cyan:    '0x77DFD8'
    white:   '0xF7F7F7'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  #dim:
  #  black:   '0x000000'
  #  red:     '0x8c3336'
  #  green:   '0x7a8530'
  #  yellow:  '0x97822e'
  #  blue:    '0x506d8f'
  #  magenta: '0x80638e'
  #  cyan:    '0x497e7a'
  #  white:   '0x9a9a9a'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  indexed_colors: []

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0
  color: '0xffffff'

# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  # url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    #launcher: xdg-open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    # modifiers: None

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false


cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (Linux/macOS) /bin/bash --login
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Windows 10 ConPTY backend (Windows only)
#
# This will enable better color support and may resolve other issues,
# however this API and its implementation is still young and so is
# disabled by default, as stability may not be as good as the winpty
# backend.
#
# Alacritty will fall back to the WinPTY automatically if the ConPTY
# backend cannot be initialized.
enable_experimental_conpty_backend: false

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
# - { key: V, mods: Control|Shift, action: Paste }
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - None
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
# key_bindings:
#   - { key: N,        mods: Command, command: { program: "open", args: ["-a", "Alacritty", "-n"] } }
#   - { key: A,         mods: Alt,       chars: "\x1ba"                       } # https://github.com/alacritty/alacritty/issues/93#issuecomment-1364783147
#   - { key: B,         mods: Alt,       chars: "\x1bb"                       }
#   - { key: C,         mods: Alt,       chars: "\x1bc"                       }
#   - { key: D,         mods: Alt,       chars: "\x1bd"                       }
#   - { key: E,         mods: Alt,       chars: "\x1be"                       }
#   - { key: F,         mods: Alt,       chars: "\x1bf"                       }
#   - { key: G,         mods: Alt,       chars: "\x1bg"                       }
#   - { key: H,         mods: Alt,       chars: "\x1bh"                       }
#   - { key: I,         mods: Alt,       chars: "\x1bi"                       }
#   - { key: J,         mods: Alt,       chars: "\x1bj"                       }
#   - { key: K,         mods: Alt,       chars: "\x1bk"                       }
#   - { key: L,         mods: Alt,       chars: "\x1bl"                       }
#   - { key: M,         mods: Alt,       chars: "\x1bm"                       }
#   - { key: N,         mods: Alt,       chars: "\x1bn"                       }
#   - { key: O,         mods: Alt,       chars: "\x1bo"                       }
#   - { key: P,         mods: Alt,       chars: "\x1bp"                       }
#   - { key: Q,         mods: Alt,       chars: "\x1bq"                       }
#   - { key: R,         mods: Alt,       chars: "\x1br"                       }
#   - { key: S,         mods: Alt,       chars: "\x1bs"                       }
#   - { key: T,         mods: Alt,       chars: "\x1bt"                       }
#   - { key: U,         mods: Alt,       chars: "\x1bu"                       }
#   - { key: V,         mods: Alt,       chars: "\x1bv"                       }
#   - { key: W,         mods: Alt,       chars: "\x1bw"                       }
#   - { key: X,         mods: Alt,       chars: "\x1bx"                       }
#   - { key: Y,         mods: Alt,       chars: "\x1by"                       }
#   - { key: Z,         mods: Alt,       chars: "\x1bz"                       }
#   - { key: A,         mods: Alt|Shift, chars: "\x1bA"                       }
#   - { key: B,         mods: Alt|Shift, chars: "\x1bB"                       }
#   - { key: C,         mods: Alt|Shift, chars: "\x1bC"                       }
#   - { key: D,         mods: Alt|Shift, chars: "\x1bD"                       }
#   - { key: E,         mods: Alt|Shift, chars: "\x1bE"                       }
#   - { key: F,         mods: Alt|Shift, chars: "\x1bF"                       }
#   - { key: G,         mods: Alt|Shift, chars: "\x1bG"                       }
#   - { key: H,         mods: Alt|Shift, chars: "\x1bH"                       }
#   - { key: I,         mods: Alt|Shift, chars: "\x1bI"                       }
#   - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                       }
#   - { key: K,         mods: Alt|Shift, chars: "\x1bK"                       }
#   - { key: L,         mods: Alt|Shift, chars: "\x1bL"                       }
#   - { key: M,         mods: Alt|Shift, chars: "\x1bM"                       }
#   - { key: N,         mods: Alt|Shift, chars: "\x1bN"                       }
#   - { key: O,         mods: Alt|Shift, chars: "\x1bO"                       }
#   - { key: P,         mods: Alt|Shift, chars: "\x1bP"                       }
#   - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                       }
#   - { key: R,         mods: Alt|Shift, chars: "\x1bR"                       }
#   - { key: S,         mods: Alt|Shift, chars: "\x1bS"                       }
#   - { key: T,         mods: Alt|Shift, chars: "\x1bT"                       }
#   - { key: U,         mods: Alt|Shift, chars: "\x1bU"                       }
#   - { key: V,         mods: Alt|Shift, chars: "\x1bV"                       }
#   - { key: W,         mods: Alt|Shift, chars: "\x1bW"                       }
#   - { key: X,         mods: Alt|Shift, chars: "\x1bX"                       }
#   - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                       }
#   - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                       }
#   - { key: Key1,      mods: Alt,       chars: "\x1b1"                       }
#   - { key: Key2,      mods: Alt,       chars: "\x1b2"                       }
#   - { key: Key3,      mods: Alt,       chars: "\x1b3"                       }
#   - { key: Key4,      mods: Alt,       chars: "\x1b4"                       }
#   - { key: Key5,      mods: Alt,       chars: "\x1b5"                       }
#   - { key: Key6,      mods: Alt,       chars: "\x1b6"                       }
#   - { key: Key7,      mods: Alt,       chars: "\x1b7"                       }
#   - { key: Key8,      mods: Alt,       chars: "\x1b8"                       }
#   - { key: Key9,      mods: Alt,       chars: "\x1b9"                       }
#   - { key: Key0,      mods: Alt,       chars: "\x1b0"                       }
#   - { key: Space,     mods: Control,   chars: "\x00"                        } # Ctrl + Space
#   - { key: Grave,     mods: Alt,       chars: "\x1b`"                       } # Alt + `
#   - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"                       } # Alt + ~
#   - { key: Period,    mods: Alt,       chars: "\x1b."                       } # Alt + .
#   - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"                       } # Alt + *
#   - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"                       } # Alt + #
#   - { key: Period,    mods: Alt|Shift, chars: "\x1b>"                       } # Alt + >
#   - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"                       } # Alt + <
#   - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"                       } # Alt + _
#   - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"                       } # Alt + %
#   - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"                       } # Alt + ^
#   - { key: Backslash, mods: Alt,       chars: "\x1b\\"                      } # Alt + \
#   - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"                       } # Alt + |```
