#!/usr/bin/env ruby

require 'thor'
require 'json'
require 'pathname'
require 'shellwords'

def cid(deployment)
  files = Pathname("~/deployments/#{deployment}").expand_path.children.select{|c| c.fnmatch('*state.json')}

  case files.size
  when 0
    raise "Could not find state file for deployment '#{deployment}'"
  when 1
    JSON.parse(files.first.read)['current_vm_cid']
  else
    raise "Could not find unique match for state files between #{files}."
  end
end

def controlvm(deployment, command)
  %x(VBoxManage controlvm #{cid(deployment)} #{command})
end

class VMInfo
  def initialize(cid)
    raise 'Missing cid' if cid.to_s.empty?

    %x(VBoxManage showvminfo #{cid} --machinereadable).lines.each do |line|
      k,v = line.split('=')
      self.class.class_exec do
        define_method(k.downcase){v.tr('"', '')}
      end
    end

    raise "Could not find information for VM with cid #{cid}" unless $?.success?
  end
end

Class.new(Thor) do
  desc 'start DEPLOYMENT', 'Start the VM that contains the given DEPLOYMENT'
  def start(deployment)
    puts %x(VBoxManage startvm #{cid(deployment)} --type headless)
  end

  desc 'stop DEPLOYMENT', 'Stop the VM (saving state) that contains the given DEPLOYMENT'
  def stop(deployment)
    puts controlvm(deployment, 'savestate')
  end

  desc 'pause DEPLOYMENT', 'Pause the VM that contains the given DEPLOYMENT'
  def pause(deployment)
    puts controlvm(deployment, 'pause')
  end

  desc 'resume DEPLOYMENT', 'Resume the VM that contains the given DEPLOYMENT'
  def resume(deployment)
    puts controlvm(deployment, 'resume')
  end

  desc 'status DEPLOYMENT', 'Print the status of the VM that contains the given DEPLOYMENT'
  def status(deployment)
    cid = cid(deployment)

    if cid.empty?
      warn "Could not find a VM for deployment #{deployment}"
    else
      puts VMInfo.new(cid).vmstate
    end
  rescue
    warn "Error: #{$!.message}"
  end

  desc 'snapshot DEPLOYMENT SNAPSHOT_NAME [DESCRIPTION]', 'Create a new snapshot of the VM that contains the given DEPLOYMENT'
  def snapshot(deployment, name, description = nil)
    puts %x(VBoxManage snapshot #{cid(deployment)} take #{name} --description #{Shellwords.escape(description)})
  end
end.start(ARGV)
